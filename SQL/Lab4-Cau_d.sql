USE QLSVNHOM
GO

---------------------- MANAGE STAFF PROCEDURES ----------------------
-- DROP PROCEDURE SP_INS_NHANVIEN
CREATE PROCEDURE SP_INS_NHANVIEN
	@MANV VARCHAR(20),
	@HOTEN NVARCHAR(100),
	@EMAIL VARCHAR(20),
	@LUONG VARBINARY(MAX),
	@TENDN NVARCHAR(100),
	@MATKHAU VARBINARY(MAX),
    @PUBKEY VARCHAR(512),
    @RESULT VARCHAR(500) OUTPUT
AS
BEGIN
BEGIN TRY
	INSERT INTO NHANVIEN(MANV, HOTEN, EMAIL, LUONG, TENDN, MATKHAU, PUBKEY)
	VALUES (@MANV, @HOTEN, @EMAIL, @LUONG, @TENDN, @MATKHAU, @PUBKEY)
    SET @RESULT = '';
END TRY
BEGIN CATCH
    SET @RESULT = ERROR_MESSAGE();
END CATCH
END
GO

--                                          LUONG (50000)
EXEC SP_INS_NHANVIEN 'NV01', 'NVA', 'NVA@', 0x6525A1B132340AD32A71C90AD723D5C4B7646DD16D5D15E1CD16E4C22FA88F3BA87C0776AC9690132E4A9D961C9862982F4AD4DFC9155B2C4F275C3D7496B36E,
--     MATKHAU (123456)
'NVA', 0x7C4A8D09CA3762AF61E59520943DC26494F8941B, '257', ''
GO

-- DROP PROCEDURE SP_SEL_NHANVIEN
CREATE PROCEDURE SP_SEL_ENCRYPT_NHANVIEN
AS
BEGIN
	SELECT MANV, HOTEN, EMAIL, LUONG
	FROM NHANVIEN
END
GO

-- DELETE NHANVIEN BASE ON MANV
CREATE PROCEDURE SP_REMOVE_NHANVIEN
    @MANV VARCHAR(20),
    @RESULT VARCHAR(500) OUTPUT
AS
BEGIN
BEGIN TRY
    DELETE FROM NHANVIEN
    WHERE MANV = @MANV
    SET @RESULT = 'SUCCESS'
END TRY
BEGIN CATCH
    SET @RESULT = ERROR_MESSAGE();
END CATCH
END
GO

-- ALTER NHANVIEN'S CONTENT BASE ON THE MANV FIELD
CREATE PROCEDURE SP_UPD_NHANVIEN
    @MANV VARCHAR(20),
    @HOTEN NVARCHAR(100) = NULL,
    @EMAIL VARCHAR(20) = NULL,
    @LUONG VARBINARY(500) = NULL,
    @TENDN NVARCHAR(100) = NULL,
    @MATKHAU VARBINARY(800) = NULL,
    @RESULT VARCHAR(500) OUTPUT
AS
BEGIN
BEGIN TRY
    UPDATE NHANVIEN
    SET HOTEN = COALESCE(@HOTEN, HOTEN),
        EMAIL = COALESCE(@EMAIL, EMAIL),
        LUONG = COALESCE(@LUONG, LUONG),
        TENDN = COALESCE(@TENDN, TENDN),
        MATKHAU = COALESCE(@MATKHAU, MATKHAU)
    WHERE MANV = @MANV
    SET @RESULT = 'SUCCESS';
END TRY
BEGIN CATCH
    SET @RESULT = ERROR_MESSAGE();
END CATCH
END
GO

-- DROP PROCEDURE SP_GET_PUBKEY_NHANVIEN
CREATE PROCEDURE SP_GET_PUBKEY_NHANVIEN
    @MANV VARCHAR(20),
    @PUBKEY VARCHAR(512) OUTPUT
AS
BEGIN
    SELECT @PUBKEY = PUBKEY
    FROM NHANVIEN
    WHERE MANV = @MANV
END
GO

---------------------- LOGIN PROCEDURES ----------------------
-- SP_lOGIN
CREATE PROCEDURE SP_LOGIN
    @USERNAME VARCHAR(20),
    @PASSWORD VARBINARY(20),
    @PUBLICKEY VARCHAR(20) OUTPUT,
    @MANV VARCHAR(20) OUTPUT,
    @RESULT VARCHAR(500) OUTPUT
AS
BEGIN
BEGIN TRY
    SET NOCOUNT ON

    -- Retrieve values from NHANVIEN table
    SELECT @PUBLICKEY = NV.PUBKEY, @MANV = NV.MANV
    FROM NHANVIEN AS NV
    WHERE TENDN = @USERNAME AND NV.MATKHAU = @PASSWORD

    -- Check if an account is found
    IF @PUBLICKEY IS NOT NULL AND @MANV IS NOT NULL
    BEGIN
        SET @RESULT = NULL;
    END
    ELSE
    BEGIN
        SET @RESULT = 'NONE';
        PRINT @RESULT;
    END

END TRY
BEGIN CATCH
    SET @RESULT = ERROR_MESSAGE();
    PRINT @RESULT;
END CATCH
END
GO

---------------------- MANAGE CLASSES PROCEDURE ----------------------
-- DROP PROCEDURE SP_GET_CLASS_INFO
CREATE PROCEDURE SP_GET_CLASS_INFO
	@MALOP VARCHAR(20)
AS
BEGIN
	SELECT MALOP AS 'Mã lớp', TENLOP AS 'Tên lớp', MANV AS 'Mã nhân viên'
	FROM LOP L
	WHERE L.MALOP = @MALOP;
END
GO

-- SP_INS_CLASSES
CREATE PROCEDURE SP_INS_CLASSES
	@MALOP VARCHAR(20),
	@TENLOP NVARCHAR(100),
	@MANV VARCHAR(20),
	@RESULT NVARCHAR(MAX) OUTPUT
AS
BEGIN
BEGIN TRY
	INSERT INTO LOP
	VALUES (@MALOP, @TENLOP, @MANV);
	
	SET @RESULT = NULL;
END TRY
BEGIN CATCH 
	SET @RESULT = ERROR_MESSAGE();
END CATCH
END
GO

-- SP_DEL_CLASSES
CREATE PROCEDURE SP_DEL_CLASSES
	@MALOP VARCHAR(20),
	@RESULT NVARCHAR(MAX) OUTPUT
AS
BEGIN
BEGIN TRY
	DELETE FROM LOP
	WHERE MALOP = @MALOP
	
	SET @RESULT = NULL;
END TRY
BEGIN CATCH 
	SET @RESULT = ERROR_MESSAGE();
END CATCH
END
GO

-- SP_ALT_CLASSES
CREATE PROCEDURE SP_ALT_CLASSES
	@MALOP_OLD VARCHAR(20),
	@MALOP VARCHAR(20),
	@TENLOP NVARCHAR(100),
	@MANV VARCHAR(20),
	@RESULT NVARCHAR(MAX) OUTPUT
AS
BEGIN
BEGIN TRY
	UPDATE LOP
	SET MALOP = @MALOP, TENLOP = @TENLOP, MANV = @MANV
	WHERE MALOP = @MALOP_OLD
	
	SET @RESULT = NULL;
END TRY
BEGIN CATCH 
	SET @RESULT = ERROR_MESSAGE();
END CATCH
END
GO

-- DROP PROCEDURE SP_SHOW_LOP
CREATE PROCEDURE SP_SHOW_LOP
AS 
BEGIN 
	SELECT MALOP AS 'Mã lớp', TENLOP AS 'Tên lớp', MANV AS 'Mã nhân viên'
	FROM LOP
END
GO

---------------------- STUDENT LIST PROCEDURES ----------------------
-- DROP PROCEDURE SP_INS_SINHVIEN
CREATE PROCEDURE SP_INS_SINHVIEN
    @MASV VARCHAR(20),
    @HOTEN NVARCHAR(100),
    @NGAYSINH DATETIME,
    @DIACHI NVARCHAR(200),
    @MALOP VARCHAR(20),
    @TENDN NVARCHAR(100),
    @MATKHAU VARBINARY(MAX),
    @RESULT VARCHAR(MAX) OUTPUT
AS
BEGIN
BEGIN TRY
    INSERT INTO SINHVIEN(MASV, HOTEN, NGAYSINH, DIACHI, MALOP, TENDN, MATKHAU)
    VALUES (@MASV, @HOTEN, @NGAYSINH, @DIACHI, @MALOP, @TENDN, @MATKHAU)

    SET @RESULT = NULL
END TRY
BEGIN CATCH
    SET @RESULT = ERROR_MESSAGE()
END CATCH
END
GO

-- SP_SHOW_LOP_PHUTRACH
CREATE PROCEDURE SP_SHOW_LOP_PHUTRACH
	@MANV VARCHAR(20)
AS 
BEGIN 
	SELECT MALOP AS 'Mã lớp'
	FROM LOP L 
	WHERE L.MANV = @MANV
END
GO

-- SP_SHOW_STUDENT_LIST
CREATE PROCEDURE SP_SHOW_STUDENT_LIST
	@MALOP VARCHAR(20)
AS
BEGIN
	SELECT MASV AS 'MSSV', HOTEN AS 'Họ tên', NGAYSINH AS 'Ngày sinh', DIACHI AS 'Địa chỉ', 
	TENDN AS 'Tên đăng nhập', NULL AS 'Mật khẩu'
	FROM SINHVIEN 
	WHERE MALOP = @MALOP
END
GO

-- DROP PROCEDURE SP_ALT_SINHVIEN
CREATE PROCEDURE SP_ALT_SINHVIEN
    @MASV_OLD VARCHAR(20),
    @MASV VARCHAR(20),
    @HOTEN NVARCHAR(100),
    @NGAYSINH DATETIME,
    @DIACHI NVARCHAR(200),
    @MALOP VARCHAR(20),
    @TENDN NVARCHAR(100),
    @MATKHAU VARBINARY(MAX),
    @RESULT VARCHAR(MAX) OUTPUT
AS
BEGIN
BEGIN TRY
    -- Check if @MATKHAU is empty or not
    IF @MATKHAU IS NULL
    BEGIN
        -- If @MATKHAU is empty, keep the old password
        UPDATE SINHVIEN
        SET MASV = @MASV, HOTEN = @HOTEN, NGAYSINH = @NGAYSINH, DIACHI = @DIACHI,
            MALOP = @MALOP, TENDN = @TENDN
        WHERE MASV = @MASV_OLD

        SET @RESULT = NULL
    END
    ELSE
    BEGIN
        -- If @MATKHAU is not empty, update the password
        UPDATE SINHVIEN
        SET MASV = @MASV, HOTEN = @HOTEN, NGAYSINH = @NGAYSINH, DIACHI = @DIACHI,
            MALOP = @MALOP, TENDN = @TENDN, MATKHAU = @MATKHAU
        WHERE MASV = @MASV_OLD

        SET @RESULT = NULL
    END
END TRY
BEGIN CATCH
    SET @RESULT = ERROR_MESSAGE()
END CATCH
END
GO

-- SP_DEL_SINHVIEN
CREATE PROCEDURE SP_DEL_SINHVIEN
    @MASV VARCHAR(20),
	@RESULT VARCHAR(MAX) OUTPUT
AS
BEGIN
BEGIN TRY
    DELETE FROM SINHVIEN
    WHERE MASV = @MASV

	SET @RESULT = NULL
END TRY
BEGIN CATCH
	SET @RESULT = ERROR_MESSAGE()
END CATCH
END
GO

---------------------- GRADING PROCEDURES ----------------------
-- drop procedure SP_INS_BANGDIEM
CREATE PROCEDURE SP_INS_BANGDIEM 
	@MASV VARCHAR(20),
	@MAHP VARCHAR(20),
	@DIEM VARBINARY(MAX),
	@RESULT VARCHAR(MAX) OUTPUT
AS
BEGIN
BEGIN TRY
    INSERT INTO BANGDIEM
    VALUES (@MASV, @MAHP, @DIEM);
	SET @RESULT = NULL
END TRY
BEGIN CATCH
	SET @RESULT = ERROR_MESSAGE()
END CATCH
END;
GO

DECLARE @md5hash VARBINARY(16)
SET @md5hash = HASHBYTES('MD5', 'BANGCHUNGTHEP')
EXEC SP_INS_SINHVIEN 'SV01', 'AU DUONG CHAN HOA', '6/15/1975', '123 MEO MEO MEO MEO', 'L01', 'ADCH', @md5hash

SET @md5hash = HASHBYTES('MD5', 'IDOLLONGEM')
EXEC SP_INS_SINHVIEN 'SV02', 'CHAU TIN TRI', '7/30/1996', '456 TRA LAI TAM TRI TO DAY', 'L01', 'CTT', @md5hash